// src/app/api/admin/settings/route.ts
import prisma from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { revalidateTag } from "next/cache";
import { validateAuthHeader } from "@/lib/auth";

export const dynamic = 'force-dynamic';

// GET - Buscar todas as configura√ß√µes
export async function GET(request: NextRequest) {
  try {
    console.log("üì° API: GET request received for admin settings");

    const authHeader = request.headers.get("authorization");
    console.log("üîë API: Auth header present:", authHeader ? 'Sim' : 'N√£o');

    const payload = validateAuthHeader(authHeader);

    if (!payload) {
      console.log("‚ùå API: Token inv√°lido ou ausente");
      return NextResponse.json(
        { error: "Token inv√°lido" },
        { status: 401 }
      );
    }

    console.log("‚úÖ API: Autentica√ß√£o v√°lida, payload:", payload);
    console.log("üîÑ API: Buscando configura√ß√µes...");

    const settings = await prisma.settings.findMany();
    
    // Converter para formato organizado por se√ß√£o
    const settingsBySection: Record<string, Record<string, any>> = {};
    
    settings.forEach((setting: any) => {
      if (!settingsBySection[setting.section]) {
        settingsBySection[setting.section] = {};
      }

      // Extrair apenas a parte da chave ap√≥s o ponto (ex: "endereco.city2" -> "city2")
      const keyParts = setting.key.split('.');
      const actualKey = keyParts.length > 1 ? keyParts.slice(1).join('.') : setting.key;

      try {
        settingsBySection[setting.section][actualKey] = JSON.parse(setting.value);
      } catch {
        settingsBySection[setting.section][actualKey] = setting.value;
      }
    });

    console.log(`üì• API: ${settings.length} configura√ß√µes encontradas`);

    return NextResponse.json({
      success: true,
      data: settingsBySection,
    });
  } catch (error) {
    console.error("Erro ao buscar configura√ß√µes:", error);
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    );
  }
}

// POST - Salvar configura√ß√µes
export async function POST(request: NextRequest) {
  try {
    console.log("üì° API: POST request received for admin settings");

    const authHeader = request.headers.get("authorization");
    console.log("üîë API: Auth header present:", authHeader ? 'Sim' : 'N√£o');

    const payload = validateAuthHeader(authHeader);

    if (!payload) {
      console.log("‚ùå API: Token inv√°lido ou ausente");
      return NextResponse.json(
        { error: "Token inv√°lido" },
        { status: 401 }
      );
    }

    console.log("‚úÖ API: Autentica√ß√£o v√°lida, payload:", payload);

    const body = await request.json();
    const { section, settings } = body;

    if (!section || !settings) {
      return NextResponse.json(
        { error: "Se√ß√£o e configura√ß√µes s√£o obrigat√≥rias" },
        { status: 400 }
      );
    }

    // Salvar cada configura√ß√£o
    for (const [key, value] of Object.entries(settings)) {
      await prisma.settings.upsert({
        where: { key: `${section}.${key}` },
        update: {
          value: JSON.stringify(value),
          section,
        },
        create: {
          key: `${section}.${key}`,
          value: JSON.stringify(value),
          section,
        },
      });
    }

    // Revalidar cache das configura√ß√µes p√∫blicas
    try {
      revalidateTag('settings-content');
      console.log("üîÑ API: Cache revalidado com sucesso");
    } catch (revalidateError) {
      console.warn("‚ö†Ô∏è API: Erro ao revalidar cache:", revalidateError);
      // N√£o falhar a opera√ß√£o por causa do cache
    }

    console.log("‚úÖ API: Configura√ß√µes salvas com sucesso");
    return NextResponse.json({
      success: true,
      message: "Configura√ß√µes salvas com sucesso",
    });
  } catch (error) {
    console.error("Erro ao salvar configura√ß√µes:", error);
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    );
  }
}

// PUT - Atualizar uma configura√ß√£o espec√≠fica
export async function PUT(request: NextRequest) {
  try {
    console.log("üì° API: PUT request received for admin settings");

    const authHeader = request.headers.get("authorization");
    console.log("üîë API: Auth header present:", authHeader ? 'Sim' : 'N√£o');

    const payload = validateAuthHeader(authHeader);

    if (!payload) {
      console.log("‚ùå API: Token inv√°lido ou ausente");
      return NextResponse.json(
        { error: "Token inv√°lido" },
        { status: 401 }
      );
    }

    console.log("‚úÖ API: Autentica√ß√£o v√°lida, payload:", payload);

    const body = await request.json();
    const { key, value, section } = body;

    if (!key || value === undefined || !section) {
      return NextResponse.json(
        { error: "Key, value e section s√£o obrigat√≥rios" },
        { status: 400 }
      );
    }

    const fullKey = `${section}.${key}`;

    await prisma.settings.upsert({
      where: { key: fullKey },
      update: {
        value: JSON.stringify(value),
        section,
      },
      create: {
        key: fullKey,
        value: JSON.stringify(value),
        section,
      },
    });

    // Revalidar cache das configura√ß√µes p√∫blicas
    try {
      revalidateTag('settings-content');
      console.log("üîÑ API: Cache revalidado com sucesso");
    } catch (revalidateError) {
      console.warn("‚ö†Ô∏è API: Erro ao revalidar cache:", revalidateError);
      // N√£o falhar a opera√ß√£o por causa do cache
    }

    console.log("‚úÖ API: Configura√ß√£o atualizada com sucesso");
    return NextResponse.json({
      success: true,
      message: "Configura√ß√£o atualizada com sucesso",
    });
  } catch (error) {
    console.error("Erro ao atualizar configura√ß√£o:", error);
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    );
  }
}